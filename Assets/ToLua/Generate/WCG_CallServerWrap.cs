//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WCG_CallServerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("CallServer");
		L.RegFunction("AddPackRpc", AddPackRpc);
		L.RegFunction("AddUnPackRpc", AddUnPackRpc);
		L.RegFunction("AddClt2CnsPackRpc", AddClt2CnsPackRpc);
		L.RegFunction("AddCns2CltUnPackRpc", AddCns2CltUnPackRpc);
		L.RegFunction("InitLuaFunc", InitLuaFunc);
		L.RegFunction("Connect2Server", Connect2Server);
		L.RegFunction("GetCurOpenId", GetCurOpenId);
		L.RegFunction("GetCurToken", GetCurToken);
		L.RegFunction("OnConnected", OnConnected);
		L.RegFunction("OnRpcRecv", OnRpcRecv);
		L.RegFunction("OnRpcRecvCs", OnRpcRecvCs);
		L.RegFunction("OnRecvStateMsg", OnRecvStateMsg);
		L.RegFunction("OnConnectFailed", OnConnectFailed);
		L.RegFunction("OnDisConnected", OnDisConnected);
		L.RegFunction("CloseConnection", CloseConnection);
		L.RegFunction("GacCallGas", GacCallGas);
		L.RegFunction("CltCallCns", CltCallCns);
		L.RegFunction("GacCsCallGas", GacCsCallGas);
		L.RegVar("m_OnLuaRecv", get_m_OnLuaRecv, set_m_OnLuaRecv);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPackRpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			WCG.CallServer.AddPackRpc(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUnPackRpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			WCG.CallServer.AddUnPackRpc(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClt2CnsPackRpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			WCG.CallServer.AddClt2CnsPackRpc(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCns2CltUnPackRpc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			WCG.CallServer.AddCns2CltUnPackRpc(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitLuaFunc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			WCG.CallServer.InitLuaFunc();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect2Server(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			WCG.CallServer.Connect2Server(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurOpenId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = WCG.CallServer.GetCurOpenId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurToken(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = WCG.CallServer.GetCurToken();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 1);
			WCG.CallServer.OnConnected(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRpcRecv(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			WCG.CallServer.OnRpcRecv(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRpcRecvCs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			WCG.CallServer.OnRpcRecvCs(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRecvStateMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WCG.EMsgState arg0 = (WCG.EMsgState)ToLua.CheckObject(L, 1, typeof(WCG.EMsgState));
			string arg1 = ToLua.CheckString(L, 2);
			WCG.CallServer.OnRecvStateMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnectFailed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 1);
			WCG.CallServer.OnConnectFailed(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDisConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 1);
			WCG.CallServer.OnDisConnected(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			WCG.CallServer.CloseConnection();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GacCallGas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			WCG.CallServer.GacCallGas(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CltCallCns(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			WCG.CallServer.CltCallCns(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GacCsCallGas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			WCG.CallServer.GacCsCallGas(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_OnLuaRecv(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, WCG.CallServer.m_OnLuaRecv);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_OnLuaRecv(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			WCG.CallServer.m_OnLuaRecv = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

